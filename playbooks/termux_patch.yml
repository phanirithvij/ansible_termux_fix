#!/usr/bin/env ansible-playbook
- hosts: localhost
  gather_facts: false
  vars:
    ansible_python_interpreter: "{{ ansible_playbook_python }}"
  tasks:
    - name: ensure git exists
      ansible.builtin.shell: command -v git
      register: git_found
      failed_when: false
      changed_when: false
    - name: install git
      ansible.builtin.command: apt -o Apt::Get::Assume-Yes=true install git
      changed_when: false
      when: 'git_found.rc != 0'
    - name: setup patch file
      args:
        creates: ~/.ansible/tmp/.termux-ansible.patch
      ansible.builtin.shell: |
        cat > ~/.ansible/tmp/.termux-ansible.patch << EOF
        diff --git a/plugins/connection/local.py b/plugins/connection/local.py
        index 27afd10..e21c4df 100644
        --- a/plugins/connection/local.py
        +++ b/plugins/connection/local.py
        @@ -42,6 +42,7 @@ class Connection(ConnectionBase):

             transport = 'local'
             has_pipelining = True
        +    _remote_is_local = True

             def __init__(self, *args, **kwargs):

        EOF
    - name: get ansible install location
      changed_when: false
      ansible.builtin.shell: |
        {{ ansible_python_interpreter }} -c "import ansible; print(ansible.__file__)" | xargs dirname
      register: ansible_dir
    - name: patch ansible to work on termux with connection local
      ansible.builtin.command: git apply ~/.ansible/tmp/.termux-ansible.patch
      register: patched_out
      args:
        chdir: "{{ ansible_dir.stdout }}"
      failed_when: 'patched_out.rc != 0 and "patch does not apply" not in patched_out.stderr'
      changed_when: 'patched_out.rc == 0'
    - name: check if python3-apt is installed
      ignore_errors: true
      register: py3apt
      ansible.builtin.apt:
        name: python3-apt
    - name: create python3-apt deb package
      when: "py3apt is failed"
      block:
        - name: get python-apt url
          ansible.builtin.shell: |
            curl -sL https://packages.termux.dev/apt/termux-main/pool/main/p/python-apt \
                | grep "_aarch64.deb" \
                | grep -oP '(?<=href=")[^"]+'
          register: aptfile
        - name: download python-apt deb
          ansible.builtin.get_url:
            url: "https://packages.termux.dev/apt/termux-main/pool/main/p/python-apt/{{ aptfile.stdout }}"
            dest: "$PREFIX/tmp/python-apt.deb"
        - name: rmdir pyapt
          ansible.builtin.file:
            name: $PREFIX/tmp/pyapt
            state: absent
        - name: makedir pyapt
          ansible.builtin.file:
            name: $PREFIX/tmp/pyapt
            state: directory
        - name: unpack deb file
          ansible.builtin.command: dpkg-deb -R python-apt.deb pyapt
          args:
            chdir: "$PREFIX/tmp"
        - name: modify deb file
          ansible.builtin.lineinfile:
            path: "$PREFIX/tmp/pyapt/DEBIAN/control"
            regexp: '^Package: python-apt$'
            line: 'Package: python3-apt'
        - name: pack deb file
          ansible.builtin.command: dpkg-deb -b pyapt python3-apt_aarch64.deb
          args:
            chdir: "$PREFIX/tmp"
        - name: install python-apt dependencies
          ansible.builtin.command: apt -o Apt::Get::Assume-Yes=true install texinfo update-info-dir
        - name: install python3-apt deb file
          ansible.builtin.command: dpkg -i python3-apt_aarch64.deb
          args:
            chdir: "$PREFIX/tmp"
